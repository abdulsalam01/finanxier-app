// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -destination=user_mock.go -source=types.go -package=user
//

// Package user is a generated GoMock package.
package http

import (
	context "context"
	reflect "reflect"

	entity "github.com/finanxier-app/internal/entity"
	redis "github.com/finanxier-app/pkg/redis"
	gomock "go.uber.org/mock/gomock"
)

// MockuserUsecase is a mock of userUsecase interface.
type MockuserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockuserUsecaseMockRecorder
}

// MockuserUsecaseMockRecorder is the mock recorder for MockuserUsecase.
type MockuserUsecaseMockRecorder struct {
	mock *MockuserUsecase
}

// NewMockuserUsecase creates a new mock instance.
func NewMockuserUsecase(ctrl *gomock.Controller) *MockuserUsecase {
	mock := &MockuserUsecase{ctrl: ctrl}
	mock.recorder = &MockuserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserUsecase) EXPECT() *MockuserUsecaseMockRecorder {
	return m.recorder
}

// GenerateValidJWT mocks base method.
func (m *MockuserUsecase) GenerateValidJWT(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateValidJWT", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateValidJWT indicates an expected call of GenerateValidJWT.
func (mr *MockuserUsecaseMockRecorder) GenerateValidJWT(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateValidJWT", reflect.TypeOf((*MockuserUsecase)(nil).GenerateValidJWT), ctx)
}

// GetCurrentUser mocks base method.
func (m *MockuserUsecase) GetCurrentUser(ctx context.Context, token any) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser", ctx, token)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUser indicates an expected call of GetCurrentUser.
func (mr *MockuserUsecaseMockRecorder) GetCurrentUser(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MockuserUsecase)(nil).GetCurrentUser), ctx, token)
}

// MockbaseAppInitializerResource is a mock of baseAppInitializerResource interface.
type MockbaseAppInitializerResource struct {
	ctrl     *gomock.Controller
	recorder *MockbaseAppInitializerResourceMockRecorder
}

// MockbaseAppInitializerResourceMockRecorder is the mock recorder for MockbaseAppInitializerResource.
type MockbaseAppInitializerResourceMockRecorder struct {
	mock *MockbaseAppInitializerResource
}

// NewMockbaseAppInitializerResource creates a new mock instance.
func NewMockbaseAppInitializerResource(ctrl *gomock.Controller) *MockbaseAppInitializerResource {
	mock := &MockbaseAppInitializerResource{ctrl: ctrl}
	mock.recorder = &MockbaseAppInitializerResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbaseAppInitializerResource) EXPECT() *MockbaseAppInitializerResourceMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockbaseAppInitializerResource) Lock(ctx context.Context, key string) (redis.RedisLockResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", ctx, key)
	ret0, _ := ret[0].(redis.RedisLockResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock.
func (mr *MockbaseAppInitializerResourceMockRecorder) Lock(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockbaseAppInitializerResource)(nil).Lock), ctx, key)
}

// Struct mocks base method.
func (m *MockbaseAppInitializerResource) Struct(s any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Struct", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Struct indicates an expected call of Struct.
func (mr *MockbaseAppInitializerResourceMockRecorder) Struct(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Struct", reflect.TypeOf((*MockbaseAppInitializerResource)(nil).Struct), s)
}
