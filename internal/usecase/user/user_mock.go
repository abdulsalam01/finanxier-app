// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -destination=user_mock.go -source=types.go -package=user
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	entity "github.com/finanxier-app/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockuserResource is a mock of userResource interface.
type MockuserResource struct {
	ctrl     *gomock.Controller
	recorder *MockuserResourceMockRecorder
}

// MockuserResourceMockRecorder is the mock recorder for MockuserResource.
type MockuserResourceMockRecorder struct {
	mock *MockuserResource
}

// NewMockuserResource creates a new mock instance.
func NewMockuserResource(ctrl *gomock.Controller) *MockuserResource {
	mock := &MockuserResource{ctrl: ctrl}
	mock.recorder = &MockuserResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserResource) EXPECT() *MockuserResourceMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockuserResource) GetByID(ctx context.Context, id string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockuserResourceMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockuserResource)(nil).GetByID), ctx, id)
}

// GetCurrentUser mocks base method.
func (m *MockuserResource) GetCurrentUser(ctx context.Context, token entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser", ctx, token)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUser indicates an expected call of GetCurrentUser.
func (mr *MockuserResourceMockRecorder) GetCurrentUser(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MockuserResource)(nil).GetCurrentUser), ctx, token)
}

// GetFirstOne mocks base method.
func (m *MockuserResource) GetFirstOne(ctx context.Context) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstOne", ctx)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstOne indicates an expected call of GetFirstOne.
func (mr *MockuserResourceMockRecorder) GetFirstOne(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstOne", reflect.TypeOf((*MockuserResource)(nil).GetFirstOne), ctx)
}

// JWTGenerator mocks base method.
func (m *MockuserResource) JWTGenerator(ctx context.Context, user entity.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JWTGenerator", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JWTGenerator indicates an expected call of JWTGenerator.
func (mr *MockuserResourceMockRecorder) JWTGenerator(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JWTGenerator", reflect.TypeOf((*MockuserResource)(nil).JWTGenerator), ctx, user)
}
